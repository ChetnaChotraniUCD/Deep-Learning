# Problem Statement-Predicting who all customers are likely to leave the bank. Customer details are provided in the form of csv file
#We are going to make an ANN to solve this problem Since this is a classification problem (Leaves/stays), we are going to work in 2 parts
#Part 1 - Data Preprocessing , Part 2 - ANN Creation 

# Install keras, Theano and TensorFlow libraries

########################################################################################################################################

#Part 1 : Preprocessing Step
#Importing the libraries

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

########################################################################################################################################

#Importing the dataset
#Read from csv
#Create matrix x of features (Independent variable) Starting location taken from 3 (as rest 2 are of no use for classification)
#upper bound (13) is not inclusive which is a dependent variable
#Hence, X is from 3rd element to 12th
#Y for Dependent variable, so only 13 included

dataset = pd.read_csv('Churn_Modelling.csv')
X = dataset.iloc[:, 3: 13].values
y = dataset.iloc[:, 13].values

########################################################################################################################################

# Encoding categorical data before splitting into training and test set
#Both Independent and dependent variable needs to be encoded
#Here , Dependent variable has only 2 values (0/1), hence encoding is not required
# We use labelencoder objects for each categorical variable which converts string to numbers
#onehotencoder creates dummy variable

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X_1 = LabelEncoder()
X[:, 1] = labelencoder_X_1.fit_transform(X[:, 1])
labelencoder_X_2 = LabelEncoder()
X[:, 2] = labelencoder_X_2.fit_transform(X[:, 2])
onehotencoder = OneHotEncoder(categorical_features = [1])
X = onehotencoder.fit_transform(X).toarray()
X = X[:,1:]

########################################################################################################################################

# Splitting the dataset into the Training set and Test set

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

########################################################################################################################################

# Feature Scaling#
#As there are highly competitive computations, this is a compulsory step
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

#########################################################################################################################################

#Part 2 - Building ANN
#Import keras libraries
#Sequential initializes the ANN
#Dense is required to build layers in ANN
#Improving the ANN
#Dropping regularization to reduce overfitting if needed.
#Droupout applies to neurons , apply dropouts to layers, 1 layer or several layers
#here dropout applies to 2 hidden layers

import keras
from keras.models import Sequential
from keras.layers import Dense

########################################################################################################################################

#Initializing the ANN

classifier = Sequential()

########################################################################################################################################

#Adding the input layer and the first hidden layer with dropout
#output_dim - Number of nodes we need to add in the first hidden layer
#init = initializing weights
#activation function for hidden layer - rectifier
#input_dim = Number of nodes in the input layer, needed only for the 1st hidden layer

classifier.add(Dense(output_dim = 6, init = 'uniform', activation = 'relu', input_dim = 11))
classifier.add(Dropout(p = 0.1))

########################################################################################################################################

#Adding second hidden layer with dropout

classifier.add(Dense(output_dim = 6, init = 'uniform', activation = 'relu'))
classifier.add(Dropout(p = 0.1))

########################################################################################################################################

#Adding the output layer
#Output only 1 node , activation function signoid

classifier.add(Dense(output_dim = 1, init = 'uniform', activation = 'sigmoid'))

########################################################################################################################################

#Compiling the ANN , applying stochastic gradient descent algorithm
#optimizer - states the algorithm which we want to use to find the optimal weights
# adam is one such algorithm
# Loss function is within the adam algorithm
#Metrices : The criteria which we use to evaluate the model

classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

########################################################################################################################################

# Fitting the ANN to the Training set

classifier.fit(X_train, y_train, batch_size = 10, nb_epoch = 100)

########################################################################################################################################

#Making the predictions and evaluating the model
# Predicting the Test set results

y_pred = classifier.predict(X_test)

########################################################################################################################################

#Predit returns probabilities
#for confusion matrix we dont need probabilities but we need output in thr form T/F
# We have to do some manipulation

y_pred = (y_pred > 0.5)

########################################################################################################################################

# Making the Confusion Matrix

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

#86% Accuracy achieved

########################################################################################################################################
